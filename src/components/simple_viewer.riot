<simple-viewer>
  <template if={state.doc}>
    <div class="row justify-content-center">
      <div class="col-3">
        <column-control
          class="d-flex mb-5"
          columns={getColumns()}
          set-columns={newColumns => setColumns(newColumns)}
        />
      </div>
    </div>

    <slot if={state.id} />

    <div class="container-fluid">
      <div class="row">
        <div class="col column {classesFor('code')}">
          <pre class="px-3"><code qtei-id="raw"></code></pre>
        </div>
        <div class="col column {classesFor('content')}">
          <div class="px-3 tei" qtei-id="content" />
        </div>
        <div class="col px-3 column {classesFor('facsimile')}">
          <img qtei-id="facsimile" class="w-100" src="{state.facsimileUrl}" />
        </div>
        <div class="col px-3 column {classesFor('map')}">
          <div qtei-id="map" style="height: 500px"></div>
        </div>
      </div>
    </div>
  </template>

  <script>
    import {Url, util} from '@wendig/lib'
    import {loadIcons} from '../lib/utils.js'

    import TeiDoc from '../lib/TeiDoc.js'
    import Renderer from '../lib/Renderer.js'

    import Pagination from './pagination.riot'
    import ColumnControl from './column_control.riot'

    export default class {
      static components = {Pagination, ColumnControl}
      constructor() {
        this.onHashChange = this.onHashChange.bind(this)
        loadIcons()
      }

      onBeforeMount(props) {
        TeiDoc.load(props.src).then(doc => {
          console.log(doc)
          const renderer = new Renderer(props.processors)
          this.update({renderer, doc})

          window.addEventListener('hashchange', this.onHashChange)
          this.onHashChange()
        })
      }

      onBeforeUnmount() {
        window.addEventListener('hashchange', this.onHashChange)
      }

      onHashChange() {
        const url = Url.current()
        const params = url.hashParams()

        // this.update({id: page})
        const body = this.state.doc.body()
        this.state.renderer.render(body)
      }

      classesFor(column) {
        const show = this.getColumns().includes(column)
        return show ? '' : 'd-none'
      }

      getColumns() {
        const str = sessionStorage.getItem('columns') || 'code,content,facsimile,map'
        return str.split(',')
      }

      setColumns(newColumns) {
        const value = newColumns.join(',')
        sessionStorage.setItem('columns', value)
        this.update()
      }
    }
  </script>
</simple-viewer>
