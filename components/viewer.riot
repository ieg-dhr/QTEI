<viewer>
  <template if={state.doc}>
    <div class="row justify-content-center">
      <div class="col-3">
        <pagination
          class="d-block text-center my-5"
          pages={state.doc.pageIds()}
          page={state.id}
          load-page={id => toPage(id)}
        />

        <column-control
          class="d-flex mb-5"
          columns={getColumns()}
          set-columns={newColumns => setColumns(newColumns)}
        />
      </div>
    </div>

    <div if={state.id} class="container-fluid">
      <div class="row">
        <div class="col column {classesFor('code')}">
          <pre class="px-3"><code id="raw"></code></pre>
        </div>
        <div class="col column {classesFor('text')}">
          <div class="px-3 tei {classesFor('text')}" id="transcription" />
        </div>
        <div class="col px-3 column {classesFor('facsimile')}">
          <img id="facsimile" class="w-100" src="{state.facsimileUrl}" />
        </div>
      </div>
    </div>
  </template>

  <script>
    import hljs from 'highlight.js/lib/core'
    import xml from 'highlight.js/lib/languages/xml'
    hljs.registerLanguage('xml', xml);

    import {Url} from '@wendig/lib'

    import TeiDoc from '../lib/teiDoc.js'
    import {formatXml, wrapWithIcon} from '../lib/util.js'
    import ColumnControl from './column_control.riot'
    import Pagination from './pagination.riot'

    export default class {
      static components = {Pagination, ColumnControl}

      constructor() {
        this.loadPage = this.loadPage.bind(this)
      }

      onBeforeMount(props) {
        TeiDoc.load(props.src).then(teiDoc => {
          this.update({doc: teiDoc})
          this.loadPage()

          window.addEventListener('hashchange', this.loadPage)
        })
      }

      onUnmounted(props, state) {
        window.removeEventListener('hashchange', this.loadPage)
      }

      onUpdated() {
        if (!this.state.id) {return}

        const r = this.root.querySelector('#raw')
        const t = this.root.querySelector('#transcription')

        r.innerHTML = ''
        t.innerHTML = ''

        r.append(this.state.code)
        t.append(this.state.content)
        hljs.highlightElement(r)
      }

      toPage(newPage) {
        const url = Url.current()
        url.setHashParams({page: newPage})
        url.apply()
      }

      classesFor(column) {
        const show = this.getColumns().includes(column)
        return show ? '' : 'd-none'
      }

      getColumns() {
        const str = sessionStorage.getItem('columns') || 'code,text,facsimile'
        return str.split(',')
      }

      setColumns(newColumns) {
        const value = newColumns.join(',')
        sessionStorage.setItem('columns', value)
        this.update()
      }

      loadPage(event) {
        const url = Url.current()
        const id = url.hashParams()['page']

        if (!id) {return}

        let content = this.state.doc.extractPage(id)
        const code = formatXml(content.outerHTML, '  ')
        this.augment(content)

        this.update({
          id,
          content,
          code,
          facsimileUrl: this.state.doc.facsimileUrl(id)
        })
      }

      augment(content) {
        for (const processor of this.props.processors) {
          processor(content)
        }
      }
    }
  </script>
</viewer>